/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-08-24 17:38:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("fn:escapeXml", org.apache.taglibs.standard.functions.Functions.class, "escapeXml", new Class[] {java.lang.String.class});
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("jar:file:/C:/Users/hanarae/Desktop/board/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/board/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1687183239433L));
    _jspx_dependants.put("/WEB-INF/views/./include/footer.jsp", Long.valueOf(1691822901646L));
    _jspx_dependants.put("jar:file:/C:/Users/hanarae/Desktop/board/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/views/./include/header.jsp", Long.valueOf(1692092545531L));
    _jspx_dependants.put("jar:file:/C:/Users/hanarae/Desktop/board/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/board/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody.release();
    _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("    <title>게시판을 만들어 보자</title>\r\n");
      out.write("    \r\n");
      out.write("	<!--개인 디자인 추가-->\r\n");
      out.write("    <link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/style.css\" rel=\"stylesheet\">\r\n");
      out.write("    \r\n");
      out.write("	<!-- Bootstrap CSS -->\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\r\n");
      out.write("	<!-- CDN SCRIPT 추가영역 -->\r\n");
      out.write(" 	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<header>\r\n");
      out.write("        <div class=\"head-div\">\r\n");
      out.write("        	<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"><img class=\"header-img\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/logo.png\"></a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </header>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<section>\r\n");
      out.write("	<div class=\"container detail-container\">\r\n");
      out.write("		<p class=\"title\">상세보기</p>\r\n");
      out.write("		<div class=\"form-box\">\r\n");
      out.write("			<form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/update\"\r\n");
      out.write("				method=\"post\" name=\"updateForm\">\r\n");
      out.write("				<div class=\"createDate\">\r\n");
      out.write("					<label>게시일</label>\r\n");
      out.write("					");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("					");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"bno\">\r\n");
      out.write("					<input type=\"hidden\" class=\"form-control\" name=\"bno\"\r\n");
      out.write("						value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly>\r\n");
      out.write("					<input type=\"hidden\" class=\"form-control\" name=\"groupNo\"\r\n");
      out.write("						value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.groupNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly>\r\n");
      out.write("					<input type=\"hidden\" class=\"form-control\" name=\"step\"\r\n");
      out.write("						value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.step}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly>\r\n");
      out.write("					<input type=\"hidden\" class=\"form-control\" name=\"depth\"\r\n");
      out.write("						value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.depth}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"input-line writer-input\">\r\n");
      out.write("					<label>작성자</label> <input class=\"form-control\" name=\"writer\"\r\n");
      out.write("						value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:escapeXml(article.writer)}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" readonly>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"input-line title-input\">\r\n");
      out.write("					<label>제목</label> <input class=\"form-control\" name=\"title\"\r\n");
      out.write("						value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:escapeXml(article.title)}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" readonly>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"input-line content-input maltiline-label\">\r\n");
      out.write("					<label>내용</label>\r\n");
      out.write("					<textarea class=\"form-control content preserve-whitespace\"\r\n");
      out.write("						name=\"content\" id=\"content\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:escapeXml(article.content)}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</textarea>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"btns\">\r\n");
      out.write("					<button type=\"button\" class=\"btn update-btn btn-outline-primary\"\r\n");
      out.write("						onclick=\"toUpdate()\">수정</button>\r\n");
      out.write("					<button type=\"button\" id=\"delBtn\"\r\n");
      out.write("						class=\"btn delete-btn btn-outline-primary\" onclick=\"toDelete()\">삭제</button>\r\n");
      out.write("					<button type=\"button\" class=\"btn list-btn btn-outline-primary\"\r\n");
      out.write("						onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/'\">목록</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn replyBtn btn-outline-primary\"\r\n");
      out.write("						onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/replyRegist/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\">답글달기</button>\r\n");
      out.write("				</div>\r\n");
      out.write("				<p style=\"display: none\" id=\"realPw\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:escapeXml(article.password)}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</p>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("<!-- 댓글 -->\r\n");
      out.write("<section style=\"margin-top: 80px;\">\r\n");
      out.write("	<div class=\"comment-container container\">\r\n");
      out.write("		<div class=\"row\">\r\n");
      out.write("\r\n");
      out.write("			<form class=\"comment-wrap\">\r\n");
      out.write("				<div class=\"comment-content\">\r\n");
      out.write("					<div class=\"comment-input\">\r\n");
      out.write("						<input type=\"text\" class=\"commentWriter form-control\"\r\n");
      out.write("							id=\"commentWriter\" placeholder=\"닉네임(10자 이내)\"> <input\r\n");
      out.write("							type=\"password\" class=\"commentPw form-control\" id=\"commentPw\"\r\n");
      out.write("							placeholder=\"비밀번호(영문,숫자,특수문자 8~15자리)\">\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"content-regist\">\r\n");
      out.write("						<textarea class=\"form-control\" rows=\"3\" id=\"comment\"\r\n");
      out.write("							placeholder=\"300자 이내\"></textarea>\r\n");
      out.write("						<button type=\"button\" id=\"commentRegist\"\r\n");
      out.write("							class=\"btn btn-outline-primary\">등록</button>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</form>\r\n");
      out.write("\r\n");
      out.write("			<div id=\"commentList\">\r\n");
      out.write("				<!-- 자바스크립트 단에서 반복문 이용해서 반복 표현 -->\r\n");
      out.write("			</div>\r\n");
      out.write("			<button type=\"button\" class=\"form-control\" id=\"moreList\"\r\n");
      out.write("				style=\"display: none;\">더보기</button>\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"modal fade\" id=\"commentModal\" role=\"dialog\">\r\n");
      out.write("	<div class=\"modal-dialog modal-md\">\r\n");
      out.write("		<div class=\"modal-content\">\r\n");
      out.write("			<div class=\"modal-header\">\r\n");
      out.write("				<h4 class=\"modal-title\">댓글 수정</h4>\r\n");
      out.write("				<button type=\"button\" id=\"closeModal\" class=\"btn btn-default pull-right\"\r\n");
      out.write("					data-dismiss=\"modal\" onclick=\"hideModal()\">닫기</button>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"modal-body\">\r\n");
      out.write("				<div class=\"comment-content\">\r\n");
      out.write("					<textarea class=\"form-control\" rows=\"4\" id=\"modalComment\"\r\n");
      out.write("						placeholder=\"내용입력\"></textarea>\r\n");
      out.write("					<div class=\"comment-group\">\r\n");
      out.write("						<div class=\"comment-input\">\r\n");
      out.write("							<input type=\"hidden\" id=\"modalCno\">\r\n");
      out.write("						</div>\r\n");
      out.write("						<button class=\"right btn btn-info\" id=\"modalModBtn\">수정하기</button>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("	//모달닫기\r\n");
      out.write("	function hideModal() {\r\n");
      out.write("		$('#commentModal').modal('hide');\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	const $content = document.getElementById('content');\r\n");
      out.write("	$content.style.height = 'auto';\r\n");
      out.write("	$content.style.height = ($content.scrollHeight) + 'px';\r\n");
      out.write("			\r\n");
      out.write("	const $comment = document.getElementById('comment');\r\n");
      out.write("	$comment.addEventListener('input', () => {\r\n");
      out.write("	    $comment.style.height = 'auto'; // 높이 초기화\r\n");
      out.write("	    $comment.style.height = ($comment.scrollHeight) + 'px'; // 스크롤 높이만큼 설정\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	const $commentWriter = document.getElementById('commentWriter');\r\n");
      out.write("	const $commentPw = document.getElementById('commentPw');\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	const $updateForm = document.updateForm;\r\n");
      out.write("	const realPw = document.getElementById('realPw').textContent;\r\n");
      out.write("		\r\n");
      out.write("	function toUpdate() {\r\n");
      out.write("		while (true) {\r\n");
      out.write("			let passwordInput = prompt('비밀번호를 입력하세요.');\r\n");
      out.write("			        \r\n");
      out.write("			if (passwordInput === null) {\r\n");
      out.write("			    break;\r\n");
      out.write("			} else if (passwordInput.trim() === '') {\r\n");
      out.write("			    alert('비밀번호를 입력하세요.');\r\n");
      out.write("			} else if (passwordInput === realPw) {\r\n");
      out.write("			    $updateForm.submit();\r\n");
      out.write("			    break;\r\n");
      out.write("			} else {\r\n");
      out.write("			    alert('비밀번호가 틀립니다.');\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("			\r\n");
      out.write("	function toDelete() {\r\n");
      out.write("	    while (true) {\r\n");
      out.write("	        let passwordInput = prompt('비밀번호를 입력하세요.');\r\n");
      out.write("			        \r\n");
      out.write("	        if (passwordInput === null) {\r\n");
      out.write("	            break;\r\n");
      out.write("	        } else if (passwordInput.trim() === '') {\r\n");
      out.write("	            alert('비밀번호를 입력하세요.');\r\n");
      out.write("	        } else if (passwordInput === realPw) {\r\n");
      out.write("	            if (confirm('정말 삭제하시겠습니까?')) {\r\n");
      out.write("	                $updateForm.setAttribute('action', '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/delete');\r\n");
      out.write("	                $updateForm.submit();\r\n");
      out.write("	                break;\r\n");
      out.write("	            }\r\n");
      out.write("		        else {\r\n");
      out.write("			        alert('비밀번호가 틀립니다.');\r\n");
      out.write("			    }\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("		 \r\n");
      out.write("		 \r\n");
      out.write("	window.onload = function () {\r\n");
      out.write("				 \r\n");
      out.write("		document.getElementById('commentRegist').onclick = () => {\r\n");
      out.write("			console.log(\"댓글 등록 이벤트\");\r\n");
      out.write("			 \r\n");
      out.write("			const bno = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\r\n");
      out.write("			let comment = document.getElementById('comment').value;\r\n");
      out.write("			let commentWriter = document.getElementById('commentWriter').value;\r\n");
      out.write("			let commentPw = document.getElementById('commentPw').value;\r\n");
      out.write("			 \r\n");
      out.write("			if(commentWriter === '') {\r\n");
      out.write("				alert('닉네임을 입력하세요');\r\n");
      out.write("				document.getElementById('commentWriter').focus();\r\n");
      out.write("				return;\r\n");
      out.write("			} else if(commentPw === '') {\r\n");
      out.write("				alert('비밀번호를 입력하세요');\r\n");
      out.write("				document.getElementById('commentPw').focus;\r\n");
      out.write("				return;\r\n");
      out.write("			} else if(comment === '') {\r\n");
      out.write("				alsert('내용을 입력하세요');\r\n");
      out.write("				document.getElementById('comment').focus;\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			 \r\n");
      out.write("		//요청에 관견된 정보 객체\r\n");
      out.write("		const reqObj = {\r\n");
      out.write("			method: 'post',\r\n");
      out.write("			headers: {\r\n");
      out.write("				'Content-Type': 'application/json'\r\n");
      out.write("				},\r\n");
      out.write("			body: JSON.stringify({\r\n");
      out.write("				'bno': bno,\r\n");
      out.write("				'comment': comment,\r\n");
      out.write("				'commentWriter': commentWriter,\r\n");
      out.write("				'commentPw': commentPw\r\n");
      out.write("			})\r\n");
      out.write("		};\r\n");
      out.write("			 \r\n");
      out.write("		fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/comment/regist/', reqObj)\r\n");
      out.write("			.then(res => res.text())\r\n");
      out.write("			.then(data => {\r\n");
      out.write("				console.log('통신성공: ', data);\r\n");
      out.write("				document.getElementById('comment').value = '';\r\n");
      out.write("				document.getElementById('commentWriter').value = '';\r\n");
      out.write("				document.getElementById('commentPw').value = '';\r\n");
      out.write("				//등록완료 후 댓글 목록 함수를 호출해서 비동기식으로 목록 표현\r\n");
      out.write("				getList(1, true);\r\n");
      out.write("			});			 \r\n");
      out.write("			 \r\n");
      out.write("		}\r\n");
      out.write("		 \r\n");
      out.write("		//더보기 버튼 처리\r\n");
      out.write("		document.getElementById('moreList').onclick = () => {\r\n");
      out.write("			getList(++page, false);\r\n");
      out.write("		}\r\n");
      out.write("		 \r\n");
      out.write("		let page = 1;\r\n");
      out.write("		let strAdd = '';\r\n");
      out.write("		const $commentList = document.getElementById('commentList');\r\n");
      out.write("		 \r\n");
      out.write("		getList(1, true);\r\n");
      out.write("		 \r\n");
      out.write("		function getList(pageNum, reset) {\r\n");
      out.write("			strAdd = '';\r\n");
      out.write("			const bno = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("			 \r\n");
      out.write("			fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/comment/getList/' + bno + '/' + pageNum)\r\n");
      out.write("			 	.then(res => res.json())\r\n");
      out.write("			 	.then(data => {\r\n");
      out.write("			 		console.log(data);\r\n");
      out.write("			 		\r\n");
      out.write("			 		let total = data.total; //총 댓글수\r\n");
      out.write("			 		let commentList = data.list;\r\n");
      out.write("			 		\r\n");
      out.write("			 		if(reset) {\r\n");
      out.write("			 			while ($commentList.firstChild) {\r\n");
      out.write("			 				$commentList.firstChild.remove();\r\n");
      out.write("			 			}\r\n");
      out.write("			 			page = 1;\r\n");
      out.write("			 		}\r\n");
      out.write("			 		\r\n");
      out.write("			 		if(commentList.length <= 0) return;\r\n");
      out.write("			 	\r\n");
      out.write("			 		console.log('현재페이지: ' + page);\r\n");
      out.write("			 		if(total <= page * 5) {\r\n");
      out.write("			 			document.getElementById('moreList').style.display = 'none';\r\n");
      out.write("                    } else {\r\n");
      out.write("                        document.getElementById('moreList').style.display = 'block';\r\n");
      out.write("                    }\r\n");
      out.write("			 		\r\n");
      out.write("			 	\r\n");
      out.write("                    for(let i=0; i<commentList.length; i++) {\r\n");
      out.write("                    	strAdd += `\r\n");
      out.write("                            <div class=\"comment-wrap\">\r\n");
      out.write("                            <div class=\"comment-content\">\r\n");
      out.write("                                <div class=\"comment-group\">\r\n");
      out.write("                                    <strong class=\"left commentWriter\">` + commentList[i].commentWriter + ` </strong>\r\n");
      out.write("                                    <div class=\"commentBtns\">\r\n");
      out.write("	                                    <small class=\"left\">` + (commentList[i].updateDate != null ? parseTime(commentList[i].updateDate) + ' (수정됨)' : parseTime(commentList[i].createDate)) + `</small>\r\n");
      out.write("	                                    <a href='` + commentList[i].cno + `' class='commentModify'>수정</a>\r\n");
      out.write("	                                    <a href='` + commentList[i].cno + `' class='commentDelete'>삭제</a>       \r\n");
      out.write("                                	</div>\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                <p id=\"pComment\" class=\"comment clearfix\">` + commentList[i].comment + `</p>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        	</div>`;\r\n");
      out.write("                    }\r\n");
      out.write("			 		\r\n");
      out.write("                    if (!reset) {\r\n");
      out.write("                        document.getElementById('commentList').insertAdjacentHTML('beforeend', strAdd);\r\n");
      out.write("                    \r\n");
      out.write("                    } else {\r\n");
      out.write("                        document.getElementById('commentList').insertAdjacentHTML('afterbegin', strAdd);\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("			 	});\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		let isPasswordInputActive = false; // 비밀번호 입력 상태를 나타내는 변수\r\n");
      out.write("\r\n");
      out.write("		//댓글 삭제 및 수정\r\n");
      out.write("		document.getElementById('commentList').addEventListener('click', async e => {\r\n");
      out.write("    		e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("    		if (e.target.matches('.commentDelete')) {\r\n");
      out.write("    			console.log('Delete 버튼이 클릭되었습니다.');\r\n");
      out.write("	    		const cno = e.target.getAttribute('href');\r\n");
      out.write("	\r\n");
      out.write("	    		async function getPassword() {\r\n");
      out.write("	        		while (true) {\r\n");
      out.write("	            		const inputPw = prompt('비밀번호를 입력하세요');\r\n");
      out.write("	            		if (inputPw === null) {\r\n");
      out.write("	                		break; \r\n");
      out.write("	            		} else if (inputPw.trim() === '') {\r\n");
      out.write("	                		alert('비밀번호를 입력하세요');\r\n");
      out.write("	                		continue;\r\n");
      out.write("	            		} else {\r\n");
      out.write("	                		const data = { 'commentPw': inputPw };\r\n");
      out.write("	\r\n");
      out.write("	                		try {\r\n");
      out.write("	                    		const response = await fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/comment/' + cno, {\r\n");
      out.write("	                        		method: 'DELETE',\r\n");
      out.write("	                       			headers: {\r\n");
      out.write("	                            		'Content-Type': 'application/json'\r\n");
      out.write("	                        		},\r\n");
      out.write("	                        		body: JSON.stringify(data)\r\n");
      out.write("	                    		});\r\n");
      out.write("	\r\n");
      out.write("	                    		const result = await response.text();\r\n");
      out.write("	                    		if (result === \"delSuccess\") {\r\n");
      out.write("	                        		if (confirm('정말 삭제하시겠습니까?')) {\r\n");
      out.write("	                            		getList(1, true);\r\n");
      out.write("	                        		}\r\n");
      out.write("	                        		break; \r\n");
      out.write("	                    		} else if (result === \"delFail\") {\r\n");
      out.write("	                        		alert('비밀번호가 틀렸습니다');\r\n");
      out.write("	                    		}\r\n");
      out.write("	                		} catch (error) {\r\n");
      out.write("	                    		console.error('Error:', error);\r\n");
      out.write("	                    		break; \r\n");
      out.write("	                		}\r\n");
      out.write("	            		}\r\n");
      out.write("	        		}\r\n");
      out.write("	    		}\r\n");
      out.write("	    		await getPassword();\r\n");
      out.write("    		} else if (e.target.matches('.commentModify')) {\r\n");
      out.write("    		    console.log('Modify 버튼이 클릭되었습니다.');\r\n");
      out.write("    		    const cno = e.target.getAttribute('href');\r\n");
      out.write("    		    const content = e.target.parentNode.parentNode.nextElementSibling.textContent;\r\n");
      out.write("    		    \r\n");
      out.write("    		    async function getPassword() {\r\n");
      out.write("    		        while (true) {\r\n");
      out.write("    		        const inputPw = prompt('비밀번호를 입력하세요');\r\n");
      out.write("    		    	isPasswordInputActive = true; // prompt 창이 열려있음을 표시\r\n");
      out.write("    		            if (inputPw === null) {\r\n");
      out.write("    		                break;\r\n");
      out.write("    		            } else if (inputPw.trim() === '') {\r\n");
      out.write("    		            	alert('비밀번호를 입력하세요');\r\n");
      out.write("	                		continue;\r\n");
      out.write("    		            } else {\r\n");
      out.write("    		                try {\r\n");
      out.write("    		                	console.log('inputPw: ', inputPw);\r\n");
      out.write("    		                	console.log('cno: ', cno);\r\n");
      out.write("    		                	const checkResponse = await fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/comment/' + cno + '?commentPw=' + inputPw, {\r\n");
      out.write("    		                	    method: \"GET\",\r\n");
      out.write("    		                	    headers: {\r\n");
      out.write("    		                	        'Content-Type': 'application/json'\r\n");
      out.write("    		                	    }\r\n");
      out.write("    		                	});\r\n");
      out.write("\r\n");
      out.write("    		                    const checkResult = await checkResponse.text();\r\n");
      out.write("    		                    if (checkResult === 'pwSuccess') {\r\n");
      out.write("    		                    	$('#commentModal').modal('show');\r\n");
      out.write("     		                        // 모달 내부의 요소들 가져오기\r\n");
      out.write("     		                        document.getElementById('modalCno').value = cno;\r\n");
      out.write("     		                        document.getElementById('modalComment').value = content;\r\n");
      out.write("     		                       if (isPasswordInputActive) {\r\n");
      out.write("     		          	            return; // 이미 다른 prompt 창이 열려있으면 함수 중단\r\n");
      out.write("     		          	        	}\r\n");
      out.write("    		                    } else if (checkResult === 'pwFail') {\r\n");
      out.write("    		                        alert('비밀번호가 틀렸습니다');\r\n");
      out.write("    		                    }\r\n");
      out.write("    		                } catch (error) {\r\n");
      out.write("    		                    console.error('Error:', error);\r\n");
      out.write("    		                    return;\r\n");
      out.write("    		                }\r\n");
      out.write("    		            }\r\n");
      out.write("    		        }\r\n");
      out.write("    		        isPasswordInputActive = false; // prompt 창이 닫혔음을 표시\r\n");
      out.write("    		    }\r\n");
      out.write("    		    await getPassword();\r\n");
      out.write("    		}\r\n");
      out.write("\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 모달 수정 버튼 클릭 이벤트 리스너\r\n");
      out.write("		document.getElementById('modalModBtn').addEventListener('click', async () => {\r\n");
      out.write("		    const updatedComment = document.getElementById('modalComment').value;\r\n");
      out.write("		    const cno = document.getElementById('modalCno').value;\r\n");
      out.write("		    \r\n");
      out.write("		    // 수정한 댓글 내용을 서버로 전송\r\n");
      out.write("		    const updatedData = {\r\n");
      out.write("		        'comment': updatedComment\r\n");
      out.write("		    };\r\n");
      out.write("		    \r\n");
      out.write("		    try {\r\n");
      out.write("		        const updateResponse = await fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/comment/' + cno, {\r\n");
      out.write("		            method: 'put',\r\n");
      out.write("		            headers: {\r\n");
      out.write("		                'Content-Type': 'application/json'\r\n");
      out.write("		            },\r\n");
      out.write("		            body: JSON.stringify(updatedData)\r\n");
      out.write("		        });\r\n");
      out.write("\r\n");
      out.write("		        const updateResult = await updateResponse.text();\r\n");
      out.write("		        if (updateResult === \"modSuccess\") {\r\n");
      out.write("		            $('#commentModal').modal('hide'); // 모달 닫기\r\n");
      out.write("		            getList(1, true); // 댓글 목록 갱신\r\n");
      out.write("		        } else {\r\n");
      out.write("		            alert('댓글 수정에 실패했습니다.');\r\n");
      out.write("		        }\r\n");
      out.write("		    } catch (updateError) {\r\n");
      out.write("		        console.error('Error:', updateError);\r\n");
      out.write("		    }\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		//댓글 날짜 변환 함수\r\n");
      out.write("	    function parseTime(regDateTime) {\r\n");
      out.write("	    	let year, month, day, hour, minute, second;\r\n");
      out.write("\r\n");
      out.write("	        if(regDateTime.length === 5) {\r\n");
      out.write("	            [year, month, day, hour, minute] = regDateTime;\r\n");
      out.write("	            second = 0;\r\n");
      out.write("	        } else {\r\n");
      out.write("	            [year, month, day, hour, minute, second] = regDateTime;\r\n");
      out.write("	        }\r\n");
      out.write("\r\n");
      out.write("	        console.log(`");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${year}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(',');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${month}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(',');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${day}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(',');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${hour}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(',');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${minute}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(',');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${second}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\r\n");
      out.write("\r\n");
      out.write("	        //원하는 날짜로 객체를 생성\r\n");
      out.write("	        const regTime = new Date(year, month-1, day, hour, minute, second);\r\n");
      out.write("	        console.log(regTime);\r\n");
      out.write("	        const date = new Date();\r\n");
      out.write("	        console.log(date);\r\n");
      out.write("	        const gap = date.getTime() - regTime.getTime();\r\n");
      out.write("\r\n");
      out.write("	        let time;\r\n");
      out.write("	        if(gap < 60 * 60 * 24 * 1000) {\r\n");
      out.write("	            if(gap < 60 * 60 * 1000) {\r\n");
      out.write("	                time = '방금 전';\r\n");
      out.write("	            } else {\r\n");
      out.write("	                time = parseInt(gap / (1000 * 60 * 60)) + '시간 전';\r\n");
      out.write("	            }\r\n");
      out.write("	        } else if(gap < 60 * 60 * 24 * 30 * 1000) {\r\n");
      out.write("	            time = parseInt(gap / (1000 * 60 * 60 * 24)) + '일 전';\r\n");
      out.write("	        } else {\r\n");
      out.write("	            time = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${regTime.getFullYear()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('년');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${regTime.getMonth()-1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('월');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${regTime.getDate()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("일`;\r\n");
      out.write("	        }\r\n");
      out.write("            return time;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("	} //window.onload\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js\" integrity=\"sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js\" integrity=\"sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("    \r\n");
      out.write("<footer>\r\n");
      out.write("    <div class=\"copyright\">\r\n");
      out.write("        <span>©MYBOARD. ALL RIGHTS RESERVED</span>\r\n");
      out.write("    </div>\r\n");
      out.write("</footer>\r\n");
      out.write("<!-- //footer -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/detail.jsp(17,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.updateDate == null}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("						<p class=\"form-control\">\r\n");
          out.write("							");
          if (_jspx_meth_fmt_005fparseDate_005f0(_jspx_th_c_005fif_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("							");
          if (_jspx_meth_fmt_005fformatDate_005f0(_jspx_th_c_005fif_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("						</p>\r\n");
          out.write("					");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fparseDate_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:parseDate
    org.apache.taglibs.standard.tag.rt.fmt.ParseDateTag _jspx_th_fmt_005fparseDate_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.ParseDateTag) _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.ParseDateTag.class);
    boolean _jspx_th_fmt_005fparseDate_005f0_reused = false;
    try {
      _jspx_th_fmt_005fparseDate_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fparseDate_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f0);
      // /WEB-INF/views/detail.jsp(19,7) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f0.setValue((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.createDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      // /WEB-INF/views/detail.jsp(19,7) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f0.setPattern("yyyy-MM-dd");
      // /WEB-INF/views/detail.jsp(19,7) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f0.setVar("parsedDateTime");
      // /WEB-INF/views/detail.jsp(19,7) name = type type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f0.setType("both");
      int _jspx_eval_fmt_005fparseDate_005f0 = _jspx_th_fmt_005fparseDate_005f0.doStartTag();
      if (_jspx_th_fmt_005fparseDate_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fparseDate_005f0);
      _jspx_th_fmt_005fparseDate_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fparseDate_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fparseDate_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fformatDate_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:formatDate
    org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag _jspx_th_fmt_005fformatDate_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag) _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag.class);
    boolean _jspx_th_fmt_005fformatDate_005f0_reused = false;
    try {
      _jspx_th_fmt_005fformatDate_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fformatDate_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f0);
      // /WEB-INF/views/detail.jsp(21,7) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f0.setValue((java.util.Date) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${parsedDateTime}", java.util.Date.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      // /WEB-INF/views/detail.jsp(21,7) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f0.setPattern("yyyy-MM-dd");
      int _jspx_eval_fmt_005fformatDate_005f0 = _jspx_th_fmt_005fformatDate_005f0.doStartTag();
      if (_jspx_th_fmt_005fformatDate_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fformatDate_005f0);
      _jspx_th_fmt_005fformatDate_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fformatDate_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fformatDate_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /WEB-INF/views/detail.jsp(24,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.updateDate != null}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("						<p class=\"form-control\">\r\n");
          out.write("							");
          if (_jspx_meth_fmt_005fparseDate_005f1(_jspx_th_c_005fif_005f1, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("							");
          if (_jspx_meth_fmt_005fformatDate_005f1(_jspx_th_c_005fif_005f1, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("						</p>\r\n");
          out.write("					");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fparseDate_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:parseDate
    org.apache.taglibs.standard.tag.rt.fmt.ParseDateTag _jspx_th_fmt_005fparseDate_005f1 = (org.apache.taglibs.standard.tag.rt.fmt.ParseDateTag) _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.ParseDateTag.class);
    boolean _jspx_th_fmt_005fparseDate_005f1_reused = false;
    try {
      _jspx_th_fmt_005fparseDate_005f1.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fparseDate_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f1);
      // /WEB-INF/views/detail.jsp(26,7) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f1.setValue((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.updateDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      // /WEB-INF/views/detail.jsp(26,7) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f1.setPattern("yyyy-MM-dd");
      // /WEB-INF/views/detail.jsp(26,7) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f1.setVar("parsedDateTime");
      // /WEB-INF/views/detail.jsp(26,7) name = type type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f1.setType("both");
      int _jspx_eval_fmt_005fparseDate_005f1 = _jspx_th_fmt_005fparseDate_005f1.doStartTag();
      if (_jspx_th_fmt_005fparseDate_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fparseDate_005f1);
      _jspx_th_fmt_005fparseDate_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fparseDate_005f1, _jsp_getInstanceManager(), _jspx_th_fmt_005fparseDate_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fformatDate_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:formatDate
    org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag _jspx_th_fmt_005fformatDate_005f1 = (org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag) _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag.class);
    boolean _jspx_th_fmt_005fformatDate_005f1_reused = false;
    try {
      _jspx_th_fmt_005fformatDate_005f1.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fformatDate_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f1);
      // /WEB-INF/views/detail.jsp(28,7) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f1.setValue((java.util.Date) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${parsedDateTime}", java.util.Date.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      // /WEB-INF/views/detail.jsp(28,7) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f1.setPattern("yyyy-MM-dd");
      int _jspx_eval_fmt_005fformatDate_005f1 = _jspx_th_fmt_005fformatDate_005f1.doStartTag();
      if (_jspx_th_fmt_005fformatDate_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fformatDate_005f1);
      _jspx_th_fmt_005fformatDate_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fformatDate_005f1, _jsp_getInstanceManager(), _jspx_th_fmt_005fformatDate_005f1_reused);
    }
    return false;
  }
}
