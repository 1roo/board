/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-08-13 11:16:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class update_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("fn:escapeXml", org.apache.taglibs.standard.functions.Functions.class, "escapeXml", new Class[] {java.lang.String.class});
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("jar:file:/C:/Users/hanarae/Desktop/board/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/board/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1687183239433L));
    _jspx_dependants.put("/WEB-INF/views/./include/footer.jsp", Long.valueOf(1691822901646L));
    _jspx_dependants.put("jar:file:/C:/Users/hanarae/Desktop/board/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/views/./include/header.jsp", Long.valueOf(1691845070310L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("    <title>게시판을 만들어 보자</title>\r\n");
      out.write("    \r\n");
      out.write("	<!--개인 디자인 추가-->\r\n");
      out.write("    <link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/style.css\" rel=\"stylesheet\">\r\n");
      out.write("    \r\n");
      out.write("	<!-- Bootstrap CSS -->\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<header>\r\n");
      out.write("        <div class=\"head-div\">\r\n");
      out.write("        	<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"><img class=\"header-img\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/logo.png\"></a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </header>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<section>\r\n");
      out.write("    <div class=\"container update-container\">\r\n");
      out.write("        <p class=\"title\">게시판 수정</p>\r\n");
      out.write("        <div class=\"form-box\">\r\n");
      out.write("            <form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/modify\" method=\"post\" name=\"updateForm\">\r\n");
      out.write("            	<input type=\"hidden\" name=\"bno\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("                <div class=\"namePw\">\r\n");
      out.write("                    <div class=\"input-line writer-input\">\r\n");
      out.write("                        <label>작성자</label>\r\n");
      out.write("                        <input class=\"form-control preserve-whitespace\" id=\"writer\" name=\"writer\" maxlength=\"10\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:escapeXml(article.writer)}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\">\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"input-line title-input\">\r\n");
      out.write("                    <label>글제목</label>\r\n");
      out.write("                    <input class=\"form-control preserve-whitespace\" id=\"title\" name=\"title\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:escapeXml(article.title)}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\"  maxlength=\"50\" placeholder=\"50자 이내\">\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"input-line content-input\">\r\n");
      out.write("                    <label>내용</label>\r\n");
      out.write("                	<textarea class=\"form-control content\" id=\"content\" rows=\"10\" name=\"content\" maxlength=\"500\" oninput=checkContentLength()>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:escapeXml(article.content)}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</textarea>\r\n");
      out.write("          			<span id=\"contentLength\">0/500</span>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"titlefoot\">\r\n");
      out.write("                    <button type=\"button\" id=\"updateBtn\" class=\"btn update-btn btn-outline-primary\">수정</button>\r\n");
      out.write("                    <button type=\"button\" class=\"btn cancle-btn btn-outline-primary\" onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/'\">취소</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  const $updateForm = document.updateForm;\r\n");
      out.write("  const $writer = document.getElementById('writer');\r\n");
      out.write("  const $title = document.getElementById('title');\r\n");
      out.write("  const $content = document.getElementById('content');\r\n");
      out.write("\r\n");
      out.write("  //작성자 검증\r\n");
      out.write("  $writer.addEventListener(\"keyup\", function(event) {\r\n");
      out.write("    const inputValue = $writer.value;\r\n");
      out.write("    // HTML 태그를 제거하고 공백을 포함한 총 10자리까지만 유지\r\n");
      out.write("    const sanitizedValue = inputValue.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n");
      out.write("    if (sanitizedValue.length >= 10 && !event.ctrlKey && !event.Backspace ) {\r\n");
      out.write("      alert(\"작성자는 10자까지만 입력 가능합니다.\");\r\n");
      out.write("    }\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  //제목 검증\r\n");
      out.write("  $title.addEventListener(\"keyup\", function(event) {\r\n");
      out.write("    const inputValue = $title.value;\r\n");
      out.write("    // HTML 태그를 제거하고 공백을 포함한 총 50자리까지만 유지\r\n");
      out.write("    const sanitizedValue = inputValue.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n");
      out.write("    if (sanitizedValue.length >= 50 && !event.ctrlKey && !event.Backspace ) {\r\n");
      out.write("      alert(\"제목은 50자까지만 입력 가능합니다.\");\r\n");
      out.write("    }\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  //내용검증\r\n");
      out.write("  $content.addEventListener(\"input\", function(event) {\r\n");
      out.write("    const maxLength = 500;\r\n");
      out.write("    const inputValue = $content.value;\r\n");
      out.write("    // HTML 태그를 제거하고 정제된 값의 길이를 체크\r\n");
      out.write("    const sanitizedValue = inputValue.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n");
      out.write("    if (sanitizedValue.length >= 500) {\r\n");
      out.write("      event.preventDefault();\r\n");
      out.write("      $content.value = sanitizedValue.substring(0, 500);\r\n");
      out.write("      alert(\"글자 수는 500자까지만 입력 가능합니다.\");\r\n");
      out.write("    }\r\n");
      out.write("  });\r\n");
      out.write("  $content.addEventListener('keyup', function(event) {\r\n");
      out.write("	  if ($content.value.length >= 500 && !event.ctrlKey && !event.Backspace) {\r\n");
      out.write("		  event.preventDefault();\r\n");
      out.write("	    $content.value = $content.value.slice(0, 500);\r\n");
      out.write("	    checkContentLength();\r\n");
      out.write("	    alert('내용은 최대 500자입니다.');\r\n");
      out.write("	    \r\n");
      out.write("	  } else {\r\n");
      out.write("	    checkContentLength();\r\n");
      out.write("	  }\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write(" //내용 글자수\r\n");
      out.write("  function checkContentLength() {\r\n");
      out.write("    const contentInput = document.getElementById('content');\r\n");
      out.write("	const contentInputValue = contentInput.value;\r\n");
      out.write("    const contentValue = $content.value; \r\n");
      out.write("    const contentLength = contentValue.length;\r\n");
      out.write(" 	document.getElementById('contentLength').textContent = $content.value.length + '/500';\r\n");
      out.write("  } \r\n");
      out.write(" \r\n");
      out.write("  window.onload = function() {\r\n");
      out.write("    checkContentLength();\r\n");
      out.write(" }\r\n");
      out.write(" \r\n");
      out.write("	\r\n");
      out.write("  //수정 버튼 이벤트 처리\r\n");
      out.write("  document.getElementById('updateBtn').onclick = function() {\r\n");
      out.write("	  if ($updateForm.title.value.trim() == '') {\r\n");
      out.write("		  alert('제목은 필수 항목입니다.');\r\n");
      out.write("		  $updateForm.title.focus();\r\n");
      out.write("		  return;\r\n");
      out.write("	  } else if ($updateForm.content.value.trim() == '') {\r\n");
      out.write("		  alert('내용은 필수 항목입니다.');\r\n");
      out.write("		  $updateForm.content.focus();\r\n");
      out.write("		  return;\r\n");
      out.write("	  }  else if ($updateForm.writer.value.trim() == '') {\r\n");
      out.write("		  alert('작성자는 필수 항목입니다.');\r\n");
      out.write("		  $updateForm.writer.focus();\r\n");
      out.write("		  return;\r\n");
      out.write("	  } else {\r\n");
      out.write("		  $updateForm.submit();\r\n");
      out.write("	  }\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js\" integrity=\"sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js\" integrity=\"sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("    \r\n");
      out.write("<footer>\r\n");
      out.write("    <div class=\"copyright\">\r\n");
      out.write("        <span>©MYBOARD. ALL RIGHTS RESERVED</span>\r\n");
      out.write("    </div>\r\n");
      out.write("</footer>\r\n");
      out.write("<!-- //footer -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
